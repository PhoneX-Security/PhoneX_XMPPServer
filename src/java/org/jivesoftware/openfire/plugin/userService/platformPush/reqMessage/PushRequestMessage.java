package org.jivesoftware.openfire.plugin.userService.platformPush.reqMessage;

import org.json.JSONException;
import org.json.JSONObject;
import org.xmpp.packet.JID;

/**
 * {"pushreq":[
 *  {"push":"newMessage", "target": "test-internal3@phone-x.net"},
 *  {"push":"newMissedCall", "target": "test-internal3@phone-x.net"},
 *  {"push":"newCall", "key":"af45bed", "expire":180000, "target": "test-internal3@phone-x.net"}
 * ]}
 *
 * Created by dusanklinec on 14.07.15.
 */

public class PushRequestMessage {
    public static final String FIELD_ACTION = "push";
    public static final String FIELD_KEY = "key";
    public static final String FIELD_EXPIRE = "expire";
    public static final String FIELD_TARGET = "target";
    public static final String FIELD_CANCEL = "cancel";

    public static final int URGENCY_MIN = 0; // MIN bound.
    public static final int URGENCY_BACKGROUND = 0; // certificate check and such.
    public static final int URGENCY_APP_NEEDS_START = 1; // DH keys are needed, necessary management.
    public static final int URGENCY_NEW_USER_EVENT = 2; // new message / missed call.
    public static final int URGENCY_REALTIME = 3; // new active incoming call. Needs to be answered quickly.
    public static final int URGENCY_MAX = 3; // MAX bound

    protected String action;

    /**
     * Identifier of the push message request.
     * Generated by client.
     * Used for duplicates avoidance.
     * Client can identify this message in order to cancel its delivery to the target device, used in calls.
     */
    protected String key;

    /**
     * Expiration time of the message in milliseconds.
     * This message should be considered as expired if given amount of time passes from its reception.
     * Mainly designed for active push messages such as call requests.
     */
    protected Long expiration;

    /**
     * User targeted by this push message request.
     */
    protected JID toUser;

    /**
     * If true this message cancels previous message referenced by key.
     */
    protected boolean cancel = false;

    /**
     * Sets by the processing engine.
     */
    protected boolean unique = true;

    /**
     * Message type w.r.t. uniqueness from user / user+resource, realtimeness.
     */
    protected int messageType = 0;

    /**
     * Realtime property of the notification.
     */
    protected int urgencyType = URGENCY_MIN;

    /**
     * Database related message id.
     */
    protected Long messageId;

    public PushRequestMessage() {
    }

    public PushRequestMessage(JSONObject json) throws JSONException {
        parserFromJson(json);
    }

    public static String parseAction(JSONObject json) throws JSONException {
        return json.has(FIELD_ACTION) ? json.getString(FIELD_ACTION) : null;
    }

    /**
     * Tries to load message from JSON object.
     * @param json
     */
    public void parserFromJson(JSONObject json) throws JSONException {
        if (json == null){
            return;
        }

        if (json.has(FIELD_ACTION)){
            action = json.getString(FIELD_ACTION);
        }

        if (json.has(FIELD_KEY)){
            key = json.getString(FIELD_KEY);
        }

        if (json.has(FIELD_EXPIRE)){
            expiration = json.getLong(FIELD_EXPIRE);
        }

        if (json.has(FIELD_TARGET)){
            toUser = new JID(json.getString(FIELD_TARGET));
        }

        if (json.has(FIELD_CANCEL)){
            cancel = json.getBoolean(FIELD_CANCEL);
        }
    }

    @Override
    public String toString() {
        return "PushRequestMessage{" +
                "action='" + action + '\'' +
                ", key='" + key + '\'' +
                ", expiration=" + expiration +
                ", toUser=" + toUser +
                ", cancel=" + cancel +
                ", unique=" + unique +
                ", messageType=" + messageType +
                ", messageId=" + messageId +
                '}';
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        PushRequestMessage that = (PushRequestMessage) o;

        if (action != null ? !action.equals(that.action) : that.action != null) return false;
        if (key != null ? !key.equals(that.key) : that.key != null) return false;
        return !(toUser != null ? !toUser.equals(that.toUser) : that.toUser != null);

    }

    @Override
    public int hashCode() {
        int result = action != null ? action.hashCode() : 0;
        result = 31 * result + (key != null ? key.hashCode() : 0);
        result = 31 * result + (toUser != null ? toUser.hashCode() : 0);
        return result;
    }

    /**
     * Returns platform push alert string notification.
     */
    public String getAlertString() {
        return "L_PHX_PUSH_ALERT";
    }

    public String getAction() {
        return action;
    }

    public void setAction(String action) {
        this.action = action;
    }

    public String getKey() {
        return key;
    }

    public void setKey(String key) {
        this.key = key;
    }

    public JID getToUser() {
        return toUser;
    }

    public void setToUser(JID toUser) {
        this.toUser = toUser;
    }

    public Long getMessageId() {
        return messageId;
    }

    public void setMessageId(Long messageId) {
        this.messageId = messageId;
    }

    public boolean isUnique() {
        return unique;
    }

    public void setUnique(boolean unique) {
        this.unique = unique;
    }

    public Long getExpiration() {
        return expiration;
    }

    public void setExpiration(Long expiration) {
        this.expiration = expiration;
    }

    public boolean isCancel() {
        return cancel;
    }

    public void setCancel(boolean cancel) {
        this.cancel = cancel;
    }

    public int getMessageType() {
        return messageType;
    }

    public void setMessageType(int messageType) {
        this.messageType = messageType;
    }

    public int getUrgencyType() {
        return urgencyType;
    }

    public void setUrgencyType(int urgencyType) {
        this.urgencyType = urgencyType;
    }
}
